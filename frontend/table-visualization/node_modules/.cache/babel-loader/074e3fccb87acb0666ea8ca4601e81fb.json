{"ast":null,"code":"var _jsxFileName = \"/Users/benpiekarz/Desktop/cs32/term-project-avonderg-bpiekarz-jurrutic-kku2-sgundotr/frontend/table-visualization/src/components/TableViz.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState } from \"react\";\nimport DisplayTable from \"./DisplayTable\"; // import TableNames from './TableNames';\n// import TableLoader from\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/**\n * The next-highest level rendering after App.jsx. This TableViz includes the table\n * selection, the actual rendering and loading of the SQL tables as well as the table\n * modification functionality.\n * @returns\n */\nexport default function TableViz() {\n  _s();\n\n  //state variables for all the dynamic components\n  const [tableNames, setTableNames] = useState([]);\n  const [tableToDisplay, setTableToDisplay] = useState(\"\");\n  const [tableData, setTableData] = useState({\n    name: \"\",\n    headers: [],\n    rows: []\n  });\n  const [tableLoaded, setTableLoaded] = useState(false);\n  /**\n   * Loads the dropdown upon page loading.\n   */\n\n  async function getTableNames() {\n    const res = await fetch(\"http://localhost:4567/tableNames\");\n    let tableNamesList = await res.json();\n    setTableNames(tableNamesList);\n  } /// fetches and sets the table data for the specified table\n\n\n  async function fetchAndSetTableData(tableName) {\n    const TablePostParams = {\n      name: tableName\n    }; //API request to the table endpoint to fetch the given table\n\n    const res = await fetch(\"http://localhost:4567/table\", {\n      method: \"post\",\n      body: JSON.stringify(TablePostParams),\n      headers: {\n        \"Content-Type\": \"application/json; charset=UTF-8\",\n        \"Access-Control-Allow-Origin\": \"*\"\n      }\n    }); // fetches the table data for the loaded sql database and table specified by dropdown from backend\n\n    let tableData = await res.json();\n    setTableData(tableData);\n    return tableData;\n  } //html framework to be rendered\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"table\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        fontFamily: \"ribesblack\",\n        marginTop: \"0%\",\n        fontSize: \"400%\",\n        color: \"white\"\n      },\n      children: \"Sprint 3 Table Visualization\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"loader\",\n      style: {\n        marginBottom: \"1%\",\n        fontFamily: \"ribesblack\",\n        fontSize: \"150%\",\n        color: \"black\"\n      },\n      onClick: () => {\n        getTableNames();\n      },\n      children: \"Load Table Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), getTableNames, /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"dropdown\",\n      style: {\n        marginBottom: \"1%\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"dropdownMenu\",\n        onChange: e => {\n          if (e.target.value !== \"Select a Table:\") {\n            setTableLoaded(true);\n            setTableToDisplay(e.target.value);\n            fetchAndSetTableData(e.target.value);\n          }\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          children: \"Select a Table:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), tableNames.map((table, index) => {\n          return /*#__PURE__*/_jsxDEV(\"option\", {\n            value: table,\n            children: table\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DisplayTable, {\n      tableName: tableToDisplay,\n      tableDisplaying: tableLoaded,\n      tableData: tableData,\n      loadTable: fetchAndSetTableData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TableViz, \"zxn/EFfY6RgnxXdcZEmsSakN9Wg=\");\n\n_c = TableViz;\n\nvar _c;\n\n$RefreshReg$(_c, \"TableViz\");","map":{"version":3,"sources":["/Users/benpiekarz/Desktop/cs32/term-project-avonderg-bpiekarz-jurrutic-kku2-sgundotr/frontend/table-visualization/src/components/TableViz.tsx"],"names":["React","useState","DisplayTable","TableViz","tableNames","setTableNames","tableToDisplay","setTableToDisplay","tableData","setTableData","name","headers","rows","tableLoaded","setTableLoaded","getTableNames","res","fetch","tableNamesList","json","fetchAndSetTableData","tableName","TablePostParams","method","body","JSON","stringify","fontFamily","marginTop","fontSize","color","marginBottom","e","target","value","map","table","index"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useState } from \"react\";\nimport DisplayTable from \"./DisplayTable\";\n// import TableNames from './TableNames';\n// import TableLoader from\n\ntype TableName = {\n  name: string;\n};\n\ntype Table = {\n  name: string;\n  headers: string[];\n  rows: Record<string, string>[];\n};\n\n/**\n * The next-highest level rendering after App.jsx. This TableViz includes the table\n * selection, the actual rendering and loading of the SQL tables as well as the table\n * modification functionality.\n * @returns\n */\nexport default function TableViz() {\n  //state variables for all the dynamic components\n  const [tableNames, setTableNames] = useState([] as string[]);\n  const [tableToDisplay, setTableToDisplay] = useState(\"\" as string);\n  const [tableData, setTableData] = useState({\n    name: \"\",\n    headers: [],\n    rows: [],\n  } as Table);\n  const [tableLoaded, setTableLoaded] = useState(false);\n\n  /**\n   * Loads the dropdown upon page loading.\n   */\n  async function getTableNames() {\n    const res = await fetch(\"http://localhost:4567/tableNames\");\n    let tableNamesList: string[] = await res.json();\n    setTableNames(tableNamesList);\n  }\n\n  /// fetches and sets the table data for the specified table\n  async function fetchAndSetTableData(tableName: string) {\n    const TablePostParams: TableName = {\n      name: tableName,\n    };\n\n    //API request to the table endpoint to fetch the given table\n    const res: Response = await fetch(\"http://localhost:4567/table\", {\n      method: \"post\",\n      body: JSON.stringify(TablePostParams),\n      headers: {\n        \"Content-Type\": \"application/json; charset=UTF-8\",\n        \"Access-Control-Allow-Origin\": \"*\",\n      },\n    });\n\n    // fetches the table data for the loaded sql database and table specified by dropdown from backend\n    let tableData: Table = await res.json();\n    setTableData(tableData);\n    return tableData;\n  }\n\n  //html framework to be rendered\n  return (\n    <div className=\"table\">\n      <h1\n        style={{\n          fontFamily: \"ribesblack\",\n          marginTop: \"0%\",\n          fontSize: \"400%\",\n          color: \"white\",\n        }}\n      >\n        Sprint 3 Table Visualization\n      </h1>\n\n      <button\n        id=\"loader\"\n        style={{\n          marginBottom: \"1%\",\n          fontFamily: \"ribesblack\",\n          fontSize: \"150%\",\n          color: \"black\",\n        }}\n        onClick={() => {\n          getTableNames();\n        }}\n      >\n        Load Table Data\n      </button>\n      {getTableNames}\n      <div id=\"dropdown\" style={{ marginBottom: \"1%\" }}>\n        <select\n          id=\"dropdownMenu\"\n          onChange={(e) => {\n            if (e.target.value !== \"Select a Table:\") {\n              setTableLoaded(true);\n              setTableToDisplay(e.target.value);\n              fetchAndSetTableData(e.target.value);\n            }\n          }}\n        >\n          <option>Select a Table:</option>\n          {tableNames.map((table, index) => {\n            return (\n              <option key={index} value={table}>\n                {table}\n              </option>\n            );\n          })}\n        </select>\n      </div>\n\n      <DisplayTable\n        tableName={tableToDisplay}\n        tableDisplaying={tableLoaded}\n        tableData={tableData}\n        loadTable={fetchAndSetTableData}\n      />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}