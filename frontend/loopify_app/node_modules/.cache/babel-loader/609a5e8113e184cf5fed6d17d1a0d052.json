{"ast":null,"code":"var _jsxFileName = \"/Users/jose/Desktop/Spring_22/cs32/term-project-avonderg-bpiekarz-jurrutic-kku2-sgundotr/frontend/loopify_app/src/components/MapContainer.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction MapContainer(props) {\n  _s();\n\n  const ref = React.useRef(null); // @ts-ignore\n\n  const [map, setMap] = React.useState(null);\n  const center = {\n    lat: props.lat,\n    lng: props.lng\n  };\n  const apiKey = process.env.LOOPIFY_APP_KEY || \"\";\n  React.useEffect(() => {\n    if (ref.current && !map) {\n      setMap(new window.google.maps.Map(ref.current, {\n        center: center,\n        zoom: props.zoom\n      }));\n    }\n  }, [ref, map]);\n  const path = new google.maps.Polyline({\n    path: props.pathCoords,\n    geodesic: true,\n    strokeColor: \"#f5f542\",\n    strokeOpacity: 0.3,\n    strokeWeight: 10\n  });\n  path.setMap(map);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map\",\n    style: {\n      height: '400px',\n      width: '600px',\n      margin: '30px auto'\n    },\n    ref: ref\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 13\n  }, this);\n}\n\n_s(MapContainer, \"J8T3hmBJOWK+l+YkV26sU2GufKQ=\");\n\n_c = MapContainer;\nexport default MapContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapContainer\");","map":{"version":3,"sources":["/Users/jose/Desktop/Spring_22/cs32/term-project-avonderg-bpiekarz-jurrutic-kku2-sgundotr/frontend/loopify_app/src/components/MapContainer.tsx"],"names":["React","MapContainer","props","ref","useRef","map","setMap","useState","center","lat","lng","apiKey","process","env","LOOPIFY_APP_KEY","useEffect","current","window","google","maps","Map","zoom","path","Polyline","pathCoords","geodesic","strokeColor","strokeOpacity","strokeWeight","height","width","margin"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAeA,SAASC,YAAT,CAAsBC,KAAtB,EAAsC;AAAA;;AAElC,QAAMC,GAAG,GAAGH,KAAK,CAACI,MAAN,CAA6B,IAA7B,CAAZ,CAFkC,CAGlC;;AACA,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBN,KAAK,CAACO,QAAN,CAAgC,IAAhC,CAAtB;AAEA,QAAMC,MAAiC,GAAG;AAACC,IAAAA,GAAG,EAAEP,KAAK,CAACO,GAAZ;AAAiBC,IAAAA,GAAG,EAAER,KAAK,CAACQ;AAA5B,GAA1C;AAEA,QAAMC,MAAM,GAAGC,OAAO,CAACC,GAAR,CAAYC,eAAZ,IAA+B,EAA9C;AAGAd,EAAAA,KAAK,CAACe,SAAN,CAAgB,MAAM;AAClB,QAAIZ,GAAG,CAACa,OAAJ,IAAe,CAACX,GAApB,EAAyB;AACrBC,MAAAA,MAAM,CAAC,IAAIW,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBC,GAAvB,CAA2BjB,GAAG,CAACa,OAA/B,EAAwC;AAC3CR,QAAAA,MAAM,EAAEA,MADmC;AAE3Ca,QAAAA,IAAI,EAAEnB,KAAK,CAACmB;AAF+B,OAAxC,CAAD,CAAN;AAIH;AACJ,GAPD,EAOG,CAAClB,GAAD,EAAME,GAAN,CAPH;AASA,QAAMiB,IAAI,GAAG,IAAIJ,MAAM,CAACC,IAAP,CAAYI,QAAhB,CAAyB;AAClCD,IAAAA,IAAI,EAAEpB,KAAK,CAACsB,UADsB;AAElCC,IAAAA,QAAQ,EAAE,IAFwB;AAGlCC,IAAAA,WAAW,EAAE,SAHqB;AAIlCC,IAAAA,aAAa,EAAE,GAJmB;AAKlCC,IAAAA,YAAY,EAAE;AALoB,GAAzB,CAAb;AAQAN,EAAAA,IAAI,CAAChB,MAAL,CAAYD,GAAZ;AAGA,sBACQ;AAAK,IAAA,EAAE,EAAC,KAAR;AAAc,IAAA,KAAK,EAAE;AAACwB,MAAAA,MAAM,EAAE,OAAT;AAAkBC,MAAAA,KAAK,EAAE,OAAzB;AAAkCC,MAAAA,MAAM,EAAE;AAA1C,KAArB;AAA6E,IAAA,GAAG,EAAE5B;AAAlF;AAAA;AAAA;AAAA;AAAA,UADR;AAIH;;GAnCQF,Y;;KAAAA,Y;AAoCT,eAAeA,YAAf","sourcesContent":["import React from 'react';\n\nimport Path from \"./Path\";\nimport {Status, Wrapper} from \"@googlemaps/react-wrapper\";\n\n//https://developers.google.com/maps/documentation/javascript/react-map\n\ninterface MapProps {\n    lat : number;\n    lng : number;\n    zoom : number;\n    pathCoords : { lat: number; lng: number; }[];\n}\n\n\nfunction MapContainer(props:MapProps) {\n\n    const ref = React.useRef<HTMLDivElement>(null);\n    // @ts-ignore\n    const [map, setMap] = React.useState<google.maps.Map>(null);\n\n    const center: google.maps.LatLngLiteral = {lat: props.lat, lng: props.lng};\n\n    const apiKey = process.env.LOOPIFY_APP_KEY || \"\"\n\n\n    React.useEffect(() => {\n        if (ref.current && !map) {\n            setMap(new window.google.maps.Map(ref.current, {\n                center: center,\n                zoom: props.zoom\n            }));\n        }\n    }, [ref, map]);\n\n    const path = new google.maps.Polyline({\n        path: props.pathCoords,\n        geodesic: true,\n        strokeColor: \"#f5f542\",\n        strokeOpacity: 0.3,\n        strokeWeight: 10,\n    });\n\n    path.setMap(map)\n\n\n    return (\n            <div id=\"map\" style={{height: '400px', width: '600px', margin: '30px auto'}} ref={ref}>\n            </div>\n    )\n}\nexport default MapContainer;"]},"metadata":{},"sourceType":"module"}