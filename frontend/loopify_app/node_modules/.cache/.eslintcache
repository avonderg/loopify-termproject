[{"/Users/benpiekarz/Desktop/cs32/term-project-avonderg-bpiekarz-jurrutic-kku2-sgundotr/frontend/loopify_app/src/index.tsx":"1","/Users/benpiekarz/Desktop/cs32/term-project-avonderg-bpiekarz-jurrutic-kku2-sgundotr/frontend/loopify_app/src/reportWebVitals.ts":"2","/Users/benpiekarz/Desktop/cs32/term-project-avonderg-bpiekarz-jurrutic-kku2-sgundotr/frontend/loopify_app/src/App.tsx":"3","/Users/benpiekarz/Desktop/cs32/term-project-avonderg-bpiekarz-jurrutic-kku2-sgundotr/frontend/loopify_app/src/components/Title.tsx":"4","/Users/benpiekarz/Desktop/cs32/term-project-avonderg-bpiekarz-jurrutic-kku2-sgundotr/frontend/loopify_app/src/components/RouteContainer.tsx":"5","/Users/benpiekarz/Desktop/cs32/term-project-avonderg-bpiekarz-jurrutic-kku2-sgundotr/frontend/loopify_app/src/components/QuoteContainer.tsx":"6","/Users/benpiekarz/Desktop/cs32/term-project-avonderg-bpiekarz-jurrutic-kku2-sgundotr/frontend/loopify_app/src/components/MotivationalQuote.tsx":"7","/Users/benpiekarz/Desktop/cs32/term-project-avonderg-bpiekarz-jurrutic-kku2-sgundotr/frontend/loopify_app/src/components/MapContainer.tsx":"8","/Users/benpiekarz/Desktop/cs32/term-project-avonderg-bpiekarz-jurrutic-kku2-sgundotr/frontend/loopify_app/src/components/Footer.tsx":"9"},{"size":554,"mtime":1652130326226,"results":"10","hashOfConfig":"11"},{"size":425,"mtime":1652130326226,"results":"12","hashOfConfig":"11"},{"size":369,"mtime":1652130326226,"results":"13","hashOfConfig":"11"},{"size":734,"mtime":1652130326226,"results":"14","hashOfConfig":"11"},{"size":2007,"mtime":1652130630763,"results":"15","hashOfConfig":"11"},{"size":1036,"mtime":1652130326226,"results":"16","hashOfConfig":"11"},{"size":597,"mtime":1652130326226,"results":"17","hashOfConfig":"11"},{"size":5514,"mtime":1652215146889,"results":"18","hashOfConfig":"11"},{"size":591,"mtime":1652130326226,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"vnde3c",{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"23"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"/Users/benpiekarz/Desktop/cs32/term-project-avonderg-bpiekarz-jurrutic-kku2-sgundotr/frontend/loopify_app/src/index.tsx",[],[],[],"/Users/benpiekarz/Desktop/cs32/term-project-avonderg-bpiekarz-jurrutic-kku2-sgundotr/frontend/loopify_app/src/reportWebVitals.ts",[],[],"/Users/benpiekarz/Desktop/cs32/term-project-avonderg-bpiekarz-jurrutic-kku2-sgundotr/frontend/loopify_app/src/App.tsx",[],[],"/Users/benpiekarz/Desktop/cs32/term-project-avonderg-bpiekarz-jurrutic-kku2-sgundotr/frontend/loopify_app/src/components/Title.tsx",[],[],"/Users/benpiekarz/Desktop/cs32/term-project-avonderg-bpiekarz-jurrutic-kku2-sgundotr/frontend/loopify_app/src/components/RouteContainer.tsx",["50","51","52","53","54"],[],"import React, {useState} from 'react';\nimport './RouteContainer.css'\nimport MapContainer from \"./MapContainer\";\nimport { Wrapper, Status } from \"@googlemaps/react-wrapper\";\nimport Footer from \"./Footer\";\n\n\nfunction RouteContainer() {\n\n    const [lat, setLat] = useState(41.8268)\n    const [lng, setLng] = useState(-71.4025)\n    const [zoom, setZoom] = useState(15)\n    const [pathCoords, setPathCoords] = useState<{ lat: number; lng: number; }[]>([])\n    const [miles, setMiles] = useState(0)\n    const apiKey = process.env.LOOPIFY_APP_KEY || \"\"\n\n\n    function sendMileage(miles : string) {\n        setPathCoords([])\n        setMiles(+miles)\n    }\n\n    // function getRoute() {\n    //     if (miles != 0) {\n    //         setZoom(+miles)\n    //         console.log(zoom);\n    //         // TODO: get route from backend, send miles and lat and lng\n    //         setPathCoords([\n    //             { lat: 41.82564761175736, lng: -71.39906517404758 },\n    //             { lat: 41.8274258402602, lng: -71.39933512294401 },\n    //             { lat: 41.82728905520579, lng: -71.40056608991783 },\n    //             { lat: 41.82558324056852, lng: -71.40037172671241 },\n    //             { lat: 41.82564761175736, lng: -71.39906517404758 },\n    //         ])\n    //     }\n    // }\n\n    const render = (status: Status) => {\n        return <h1>{status}</h1>;\n    };\n\n    return (\n        <div className=\"RouteContainer\">\n\n            <h2> find a loop </h2>\n\n\n            {/*<label> miles: </label>*/}\n            {/*<input type=\"number\" onChange={(e) => sendMileage(e.target.value)}/> <br/>*/}\n\n            <Wrapper apiKey={\"AIzaSyBl5KAwLFMirggDCvul35kcVDtFeIdRIe8\"} render={render}>\n                <MapContainer\n                    lat = {lat}\n                    lng = {lng}\n                    pathCoords = {pathCoords}\n                    zoom = {zoom}\n                    miles = {miles}\n                />\n            </Wrapper>\n\n            <Footer/>\n        </div>\n\n    )\n}\nexport default RouteContainer;","/Users/benpiekarz/Desktop/cs32/term-project-avonderg-bpiekarz-jurrutic-kku2-sgundotr/frontend/loopify_app/src/components/QuoteContainer.tsx",[],[],"/Users/benpiekarz/Desktop/cs32/term-project-avonderg-bpiekarz-jurrutic-kku2-sgundotr/frontend/loopify_app/src/components/MotivationalQuote.tsx",[],[],"/Users/benpiekarz/Desktop/cs32/term-project-avonderg-bpiekarz-jurrutic-kku2-sgundotr/frontend/loopify_app/src/components/MapContainer.tsx",["55","56","57","58","59","60"],[],"import React, { useState } from \"react\";\nimport \"./MapContainer.css\";\n\n//https://developers.google.com/maps/documentation/javascript/react-map\n\ninterface MapProps {\n  lat: number;\n  lng: number;\n  zoom: number;\n  miles: number;\n  pathCoords: { lat: number; lng: number }[];\n}\n\ntype RouteInfo = {\n  distance: number;\n  coords: google.maps.LatLng[];\n};\n\nfunction MapContainer(props: MapProps) {\n  const ref = React.useRef<HTMLDivElement>(null);\n\n  // @ts-ignore\n  const [map, setMap] = React.useState<google.maps.Map>(null);\n  const [miles, setMiles] = useState(0);\n  const [zoom, setZoom] = useState(16.6);\n  const [lat, setLat] = useState(41.8268);\n  const [lng, setLng] = useState(-71.4025);\n  const [dist, setDist] = useState(0);\n  const apiKey = process.env.LOOPIFY_APP_KEY || \"\";\n\n  let path: google.maps.Polyline | null = null;\n  let loc: google.maps.Marker | null = null;\n\n  React.useEffect(() => {\n    if (ref.current && !map) {\n      setMap(\n        new window.google.maps.Map(ref.current, {\n          center: { lat: lat, lng: lng },\n          zoom: zoom,\n        })\n      );\n    }\n  }, [ref, map]);\n\n  /**\n   * function that changes the mileage when the miles input box is changed.\n   * clears the current path on the map (if there is one) and sets the zoom and\n   * miles values\n   * @param miles input number\n   */\n  function sendMileage(miles: string) {\n    // remove previous path drawn\n    if (path) {\n      path.setMap(null);\n    }\n\n    // reset mileage and zoom value\n    setMiles(+miles);\n    setZoom(15 - 0.4 * +miles);\n\n    // reset zoom level of map\n    map.setZoom(zoom);\n    console.log(zoom);\n  }\n\n  /**\n   * function that clears the current route on the map, retrieves the\n   * new path's coordinates from the backend, and draws the new path\n   */\n  async function getRoute() {\n    // if mileage inputted is not empty\n    if (miles != 0) {\n      // remove previous path\n      if (path != null) {\n        path.setMap(null);\n        console.log(\"remove \" + path);\n      }\n\n      // get route from backend\n      let info: RouteInfo = { distance: 0, coords: [] };\n      await getRouteInfo().then((value) => (info = value));\n\n      let pathCoords: google.maps.LatLng[] = info.coords;\n      console.log(pathCoords);\n      console.log(info.distance);\n      setDist(info.distance);\n      console.log(dist);\n\n      // [{ lat: 41.82564761175736, lng: -71.39906517404758 },\n      // { lat: 41.8274258402602, lng: -71.39933512294401 },\n      // { lat: 41.82728905520579, lng: -71.40056608991783 },\n      // { lat: 41.82558324056852, lng: -71.40037172671241 },\n      // { lat: 41.82564761175736, lng: -71.39906517404758 }]\n\n      // create new path's polyline\n      path = new google.maps.Polyline({\n        path: pathCoords, //route.coords,\n        geodesic: true,\n        strokeColor: \"#ea4435\",\n        strokeOpacity: 0.8,\n        strokeWeight: 10,\n      });\n\n      // draw path on the map\n      path.setMap(map);\n      console.log(\"drew \" + path);\n    }\n  }\n\n  /**\n   * Loads the dropdown upon page loading.\n   */\n  async function getRouteInfo() {\n    return new Promise<RouteInfo>(async (resolve) => {\n      const userRouteRequest: number[] = [lat, lng, miles];\n      const res: Response = await fetch(\"http://localhost:4567/getRoute\", {\n        method: \"post\",\n        body: JSON.stringify(userRouteRequest),\n        headers: {\n          \"Content-Type\": \"application/json; charset=UTF-8\",\n          \"Access-Control-Allow-Origin\": \"*\",\n        },\n      });\n      let route: RouteInfo = { distance: 0, coords: [] };\n      let routeData: void = await res.json().then((value) => {\n        route = value;\n      });\n      if (route.coords.length > 0) {\n        resolve(route);\n      }\n    });\n  }\n\n  /**\n   * function that retrieves user's current location\n   */\n  async function getCurLoc() {\n    console.log(loc);\n\n    // remove previous marker\n    if (loc) {\n      loc.setMap(null);\n      console.log(\"remove \" + loc);\n    }\n    if (path) {\n      path.setMap(null);\n    }\n\n    if (navigator.geolocation) {\n      await accessLoc();\n\n      // create new marker\n      loc = new google.maps.Marker({\n        position: { lat: lat, lng: lng },\n      });\n\n      // draw path on the map\n      loc.setMap(map);\n      if (path) {\n        path.setMap(null);\n      }\n      map.setCenter({ lat, lng });\n      console.log(\"drew \" + loc);\n    }\n  }\n\n  /**\n   * async function that return a promise after current location\n   * has been udpated to user's actual location\n   */\n  async function accessLoc() {\n    return new Promise<void>((resolve) => {\n      navigator.geolocation.getCurrentPosition((position) => {\n        setLat(position.coords.latitude);\n        setLng(position.coords.longitude);\n      });\n      if (lat != 41.82868 && lng != -71.4025) {\n        resolve();\n      }\n    });\n  }\n\n  return (\n    <div id=\"map container\">\n      <label> base: </label>\n      <button onClick={getCurLoc} id=\"locationButton\">\n        {\" \"}\n        use my location{\" \"}\n      </button>{\" \"}\n      <br />\n      <label> miles: </label>\n      <input\n        type=\"number\"\n        min=\"0\"\n        onChange={(e) => sendMileage(e.target.value)}\n      />\n      <br />\n      <button id=\"goButton\" onClick={getRoute}>\n        {\" \"}\n        go!{\" \"}\n      </button>{\" \"}\n      <br />\n      <div\n        id=\"map\"\n        style={{ height: \"400px\", width: \"600px\", margin: \"30px auto\" }}\n        ref={ref}\n      ></div>\n      <p> route distance: {Math.round(100 * dist) / 100} miles </p>\n    </div>\n  );\n}\nexport default MapContainer;\n","/Users/benpiekarz/Desktop/cs32/term-project-avonderg-bpiekarz-jurrutic-kku2-sgundotr/frontend/loopify_app/src/components/Footer.tsx",[],[],{"ruleId":"61","severity":1,"message":"62","line":10,"column":17,"nodeType":"63","messageId":"64","endLine":10,"endColumn":23},{"ruleId":"61","severity":1,"message":"65","line":11,"column":17,"nodeType":"63","messageId":"64","endLine":11,"endColumn":23},{"ruleId":"61","severity":1,"message":"66","line":12,"column":18,"nodeType":"63","messageId":"64","endLine":12,"endColumn":25},{"ruleId":"61","severity":1,"message":"67","line":15,"column":11,"nodeType":"63","messageId":"64","endLine":15,"endColumn":17},{"ruleId":"61","severity":1,"message":"68","line":18,"column":14,"nodeType":"63","messageId":"64","endLine":18,"endColumn":25},{"ruleId":"61","severity":1,"message":"67","line":29,"column":9,"nodeType":"63","messageId":"64","endLine":29,"endColumn":15},{"ruleId":"69","severity":1,"message":"70","line":43,"column":6,"nodeType":"71","endLine":43,"endColumn":16,"suggestions":"72"},{"ruleId":"73","severity":1,"message":"74","line":72,"column":15,"nodeType":"75","messageId":"76","endLine":72,"endColumn":17},{"ruleId":"61","severity":1,"message":"77","line":125,"column":11,"nodeType":"63","messageId":"64","endLine":125,"endColumn":26},{"ruleId":"73","severity":1,"message":"74","line":177,"column":15,"nodeType":"75","messageId":"76","endLine":177,"endColumn":17},{"ruleId":"73","severity":1,"message":"74","line":177,"column":34,"nodeType":"75","messageId":"76","endLine":177,"endColumn":36},"@typescript-eslint/no-unused-vars","'setLat' is assigned a value but never used.","Identifier","unusedVar","'setLng' is assigned a value but never used.","'setZoom' is assigned a value but never used.","'apiKey' is assigned a value but never used.","'sendMileage' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'lat', 'lng', and 'zoom'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setMap' needs the current value of 'lat'.","ArrayExpression",["78"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'routeData' is assigned a value but never used.",{"desc":"79","fix":"80"},"Update the dependencies array to be: [ref, map, lat, lng, zoom]",{"range":"81","text":"82"},[1095,1105],"[ref, map, lat, lng, zoom]"]